TSL2591 Ambient Light Sensor
============================

.. seo::
    :description: Instructions for setting up TSL2591 ambient light sensors in ESPHome.
    :image: tsl2591.jpg
    :keywords: TSL2591

The ``tsl2591`` sensor platform allows you to use the AMS TSL2591 ambient light sensor with ESPHome.
Communication with the sensors is over :ref:`I²C <i2c>`, which must be present in your configuration.
The Adafruit sensors library, upon which this integration is based, also requires you to
configure :ref:`SPI <spi>`, but SPI is not actually used for this device in the runtime.

The TSL2591 device is available on breakout boards from a few vendors
(for example, `Adafruit`_, `CQRobot`_, `Waveshare`_).

.. _Adafruit: http://www.adafruit.com/products/1980
.. _CQRobot: https://www.cqrobot.com/index.php?route=product/product&product_id=1112
.. _Waveshare: https://www.waveshare.net/shop/TSL25911-Light-Sensor.htm

.. figure:: images/tsl2591.jpg
    :align: center
    :width: 50.0%

    TSL2591 Ambient Light Sensor on a breakout board.

The sensor claims a dynamic range of 600 million to 1 with an effective range up to 88000 lux.
It achieves that large range by having a configurable ``gain`` value.
You want a higher gain value when measuring less intense light sources.
On the other hand, if you get ADC readings of 65,535 for either physical sensor,
you may be saturating that sensor and need to reduce the gain.
This Wikipedia `article <https://en.wikipedia.org/wiki/Lux>`__ has a table of some lux values for comparison.

The implementation offers four logical sensors, each of which has a default unit of measurement of ``lux``.
The device's two physical sensors measure "visible and infrared" and "infrared", respectively.
However, the logical sensor readings here also provides the simple visible value separately.
The visible value is obtained by subtracting the reading of the physical infrared sensor
from the value of the physical sensor that combines visible and infrared.
Since those are two different infrared sensor readings, there is the possibility of a small inaccuracy.

- **full_spectrum**: Raw 16 bit reading from the on-board ADC for the physical sensor for visible and infrared light.
  This is not really ``lux``.
- **infrared**: Raw 16 bit reading from the on-board ADC for the physical sensor for infrared light.
  This is not really ``lux``
- **visible**: For convenience, a value calculated by taking the difference of the two physical sensors.
  This is not really ``lux``.
- **calculated_lux**: This is a calculated value for lux based on the readings of the
  physical sensors, the configured gain, and the configured integration time.
  For details of the actual calculation, which can depend on additional physical properties,
  see method ``Adafruit_TSL2591::calculateLux()`` in the Adafruit TSL2591 library.
  If you are not happy with that calculation, you have the raw data you need to do your own.
  AMS has a few application notes that discuss this.

Values reported are said to be in units of ``lux``, but there are some things to understand about that.

- Three of the sensors reflect raw ADC values, as described just above. They are not really lux values.
- The gain values that can be configured are only approximations.
  The sensor will use something close to it, but the exact value can vary from device to device.
  See the TSL2591 datasheet for the specific device characteristic ranges.
- The measurement of any lux value requires careful calibration for the light frequency
  or frequencies under measurement, conversion coefficients for the specific device, and other factors.
  In short, to really get a true lux value measurement, you should do a lab-grade calibration specific to your use case.
  If you are the sort of person who can do a lab-grade calibration, you probably knew all of that already.
- Even considering the above points, you can still get values that will be "in the ballpark" without calibration.
  This is especially true if you just want to distinguish among "no light", "a little bit of light",
  "a lot of light", or something similar.

.. code-block:: yaml

    # Example configuration entry
    i2c:
      # ...
    spi:
      # ...
    sensor:
      - platform: tsl2591
        id: "my_tls2591"
        name: "TSL2591 Ambient Light"
        address: 0x29
        update_interval: 60s
        visible:
          name: "TSL2591 visible light"
        infrared:
          name: "TSL2591 infrared light"
        full_spectrum:
          name: "TSL2591 full spectrum light"
        calculated_lux:
          name: "TSL2591 Lux"

Configuration variables:
------------------------
For the TSL2591 device:

- **id** (*Optional*, :ref:`config-id`): Manually specify the ID used for code generation.
- **address** (*Optional*, int): Manually specify the I²C address of the device.
  Defaults to ``0x29``.
  It is probably not possible to change this for this device.
  It also uses a secondary address of ``0x28`` (see the datasheet), making that address unavailable for other devices on the same bus.
- **integration_time** (*Optional*, :ref:`config-time`):
  The time the device will use for each measurement. Longer means more accurate values.
  You cannot specify an arbitrary amount of time. It must be the equivalent of one of:

  - ``100ms``   *(default)*
  - ``200ms``
  - ``300ms``
  - ``400ms``
  - ``500ms``
  - ``600ms``

- **gain** (*Optional*, string): The gain the device will use. Higher values are better in low-light conditions.
  Multipliers here are approximate. Values below on the same line are aliases.
  You cannot specify an arbitrary gain multiplier. It must be one of:

  - ``low``, ``1x``
  - ``medium``, ``med``, ``25x``   *(default)*
  - ``high``, ``428x``
  - ``maximum``, ``max``, ``9876x``

- **update_interval** (*Optional*, :ref:`config-time`): The interval for checking the sensors.
  Defaults to ``60s``.
  The device is in a low power state between update intervals.

You can configure all or any subset of the sensors listed above (``full_spectrum``, ``infrared``, ``visible``, ``calculated_lux``).
Each configured sensor is reported separately on each **update_interval**.
For each configured sensor:

- **name** (**Required**, string): The name for the sensor.
- All other options from :ref:`Sensor <config-sensor>`.

  
See Also
--------

- :ref:`sensor-filters`
- `AMS TSL2591 datasheet <https://ams.com/documents/20143/36005/TSL2591_DS000338_6-00.pdf>`__
- `Adafruit TSL2591 Arduino Library <https://github.com/adafruit/Adafruit_TSL2591_Library>`__ by `Adafruit <https://adafruit.com/>`__
- `Waveshare TSL2591 Libraries <https://github.com/waveshare/TSL2591X-Light-Sensor>`__ by `Waveshare Electronics <https://www.waveshare.net/>`__ *(An alternative library for Arduino, Raspberry Pi, and STM32; not used in this integration.)*
- :doc:`tsl2561`
- :doc:`bh1750`
- :apiref:`tsl2591/tsl2591.h`
- :ghedit:`Edit`
